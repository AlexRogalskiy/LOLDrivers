name: Publish a Release 
on:
  push:
      tags:
        - 'v*.*.*'

jobs:

  validate-yaml:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python 3.11
      uses: actions/setup-python@v4.5.0
      with:
        python-version: 3.11
    - name: Install Poetry
      run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
    - name: Install dependencies with Poetry
      run: poetry install
    - name: Run YAML Checks
      run: poetry run python bin/validate.py -v

  generate-site:
    runs-on: ubuntu-latest
    needs: validate-yaml
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.PUSH_TOKEN }}
    - name: Set up Python 3.11
      uses: actions/setup-python@v4.5.0
      with:
        python-version: 3.11
    - name: Install Poetry
      run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
    - name: Install dependencies with Poetry
      run: poetry install
    - name: Run Site Generation 
      run: poetry run python bin/site.py -v
    - name: Run Site Generation 
      run: poetry run python bin/gen-files.py

  build-hugo:
    runs-on: ubuntu-latest
    needs: generate-site
    env:
      HUGO_VERSION: 0.111.3
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass Embedded
        run: sudo snap install dart-sass-embedded
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.PUSH_TOKEN }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Install Node.js dependencies
        run: |
          cd loldrivers.io/
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          cd loldrivers.io/
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./loldrivers.io/public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-hugo
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  create_release:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build drivers.zip
      run: |
        mkdir build
        cp -r drivers/ build/drivers
        cd build
        zip -r drivers.zip drivers/

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload drivers.zip as Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/drivers.zip
        asset_name: drivers.zip
        asset_content_type: application/zip

